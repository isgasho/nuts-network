// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/documentlog/interface.go

// Package documentlog is a generated GoMock package.
package documentlog

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/nuts-foundation/nuts-network/pkg/model"
	stats "github.com/nuts-foundation/nuts-network/pkg/stats"
	io "io"
	reflect "reflect"
	time "time"
)

// MockDocumentLog is a mock of DocumentLog interface
type MockDocumentLog struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentLogMockRecorder
}

// MockDocumentLogMockRecorder is the mock recorder for MockDocumentLog
type MockDocumentLogMockRecorder struct {
	mock *MockDocumentLog
}

// NewMockDocumentLog creates a new mock instance
func NewMockDocumentLog(ctrl *gomock.Controller) *MockDocumentLog {
	mock := &MockDocumentLog{ctrl: ctrl}
	mock.recorder = &MockDocumentLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentLog) EXPECT() *MockDocumentLogMockRecorder {
	return m.recorder
}

// Documents mocks base method
func (m *MockDocumentLog) Documents() []model.Document {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents")
	ret0, _ := ret[0].([]model.Document)
	return ret0
}

// Documents indicates an expected call of Documents
func (mr *MockDocumentLogMockRecorder) Documents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockDocumentLog)(nil).Documents))
}

// HasDocument mocks base method
func (m *MockDocumentLog) HasDocument(hash model.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDocument", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasDocument indicates an expected call of HasDocument
func (mr *MockDocumentLogMockRecorder) HasDocument(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDocument", reflect.TypeOf((*MockDocumentLog)(nil).HasDocument), hash)
}

// HasContentsForDocument mocks base method
func (m *MockDocumentLog) HasContentsForDocument(hash model.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasContentsForDocument", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasContentsForDocument indicates an expected call of HasContentsForDocument
func (mr *MockDocumentLogMockRecorder) HasContentsForDocument(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasContentsForDocument", reflect.TypeOf((*MockDocumentLog)(nil).HasContentsForDocument), hash)
}

// GetDocument mocks base method
func (m *MockDocumentLog) GetDocument(hash model.Hash) *model.Document {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", hash)
	ret0, _ := ret[0].(*model.Document)
	return ret0
}

// GetDocument indicates an expected call of GetDocument
func (mr *MockDocumentLogMockRecorder) GetDocument(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockDocumentLog)(nil).GetDocument), hash)
}

// GetDocumentContents mocks base method
func (m *MockDocumentLog) GetDocumentContents(hash model.Hash) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentContents", hash)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentContents indicates an expected call of GetDocumentContents
func (mr *MockDocumentLogMockRecorder) GetDocumentContents(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentContents", reflect.TypeOf((*MockDocumentLog)(nil).GetDocumentContents), hash)
}

// AddDocument mocks base method
func (m *MockDocumentLog) AddDocument(document model.Document) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDocument", document)
}

// AddDocument indicates an expected call of AddDocument
func (mr *MockDocumentLogMockRecorder) AddDocument(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocument", reflect.TypeOf((*MockDocumentLog)(nil).AddDocument), document)
}

// AddDocumentWithContents mocks base method
func (m *MockDocumentLog) AddDocumentWithContents(timestamp time.Time, documentType string, contents io.Reader) (model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocumentWithContents", timestamp, documentType, contents)
	ret0, _ := ret[0].(model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDocumentWithContents indicates an expected call of AddDocumentWithContents
func (mr *MockDocumentLogMockRecorder) AddDocumentWithContents(timestamp, documentType, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocumentWithContents", reflect.TypeOf((*MockDocumentLog)(nil).AddDocumentWithContents), timestamp, documentType, contents)
}

// AddDocumentContents mocks base method
func (m *MockDocumentLog) AddDocumentContents(hash model.Hash, contents io.Reader) (model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocumentContents", hash, contents)
	ret0, _ := ret[0].(model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDocumentContents indicates an expected call of AddDocumentContents
func (mr *MockDocumentLogMockRecorder) AddDocumentContents(hash, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocumentContents", reflect.TypeOf((*MockDocumentLog)(nil).AddDocumentContents), hash, contents)
}

// Statistics mocks base method
func (m *MockDocumentLog) Statistics() []stats.Statistic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics")
	ret0, _ := ret[0].([]stats.Statistic)
	return ret0
}

// Statistics indicates an expected call of Statistics
func (mr *MockDocumentLogMockRecorder) Statistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockDocumentLog)(nil).Statistics))
}

// Start mocks base method
func (m *MockDocumentLog) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockDocumentLogMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDocumentLog)(nil).Start))
}

// Stop mocks base method
func (m *MockDocumentLog) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockDocumentLogMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDocumentLog)(nil).Stop))
}

// Subscribe mocks base method
func (m *MockDocumentLog) Subscribe(documentType string) DocumentQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", documentType)
	ret0, _ := ret[0].(DocumentQueue)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockDocumentLogMockRecorder) Subscribe(documentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockDocumentLog)(nil).Subscribe), documentType)
}

// MockDocumentQueue is a mock of DocumentQueue interface
type MockDocumentQueue struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentQueueMockRecorder
}

// MockDocumentQueueMockRecorder is the mock recorder for MockDocumentQueue
type MockDocumentQueueMockRecorder struct {
	mock *MockDocumentQueue
}

// NewMockDocumentQueue creates a new mock instance
func NewMockDocumentQueue(ctrl *gomock.Controller) *MockDocumentQueue {
	mock := &MockDocumentQueue{ctrl: ctrl}
	mock.recorder = &MockDocumentQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentQueue) EXPECT() *MockDocumentQueueMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDocumentQueue) Get(context context.Context) (model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", context)
	ret0, _ := ret[0].(model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDocumentQueueMockRecorder) Get(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDocumentQueue)(nil).Get), context)
}
