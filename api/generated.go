// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Document defines model for Document.
type Document struct {

	// Hex-encoded hash of the document
	Hash string `json:"hash"`

	// Timestamp at which the document was created in nanoseconds (since Unix epoch)
	Timestamp int64 `json:"timestamp"`

	// type of the document
	Type string `json:"type"`
}

// DocumentWithContents defines model for DocumentWithContents.
type DocumentWithContents struct {

	// Actual contents of the document
	Contents []byte `json:"contents"`

	// Timestamp at which the document was created in nanoseconds (since Unix epoch)
	Timestamp int64 `json:"timestamp"`

	// type of the document
	Type string `json:"type"`
}

// AddDocumentJSONBody defines parameters for AddDocument.
type AddDocumentJSONBody DocumentWithContents

// AddDocumentRequestBody defines body for AddDocument for application/json ContentType.
type AddDocumentJSONRequestBody AddDocumentJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListDocuments request
	ListDocuments(ctx context.Context) (*http.Response, error)

	// AddDocument request  with any body
	AddDocumentWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	AddDocument(ctx context.Context, body AddDocumentJSONRequestBody) (*http.Response, error)

	// GetDocument request
	GetDocument(ctx context.Context, hash string) (*http.Response, error)

	// GetDocumentContents request
	GetDocumentContents(ctx context.Context, hash string) (*http.Response, error)
}

func (c *Client) ListDocuments(ctx context.Context) (*http.Response, error) {
	req, err := NewListDocumentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddDocumentWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddDocumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddDocument(ctx context.Context, body AddDocumentJSONRequestBody) (*http.Response, error) {
	req, err := NewAddDocumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocument(ctx context.Context, hash string) (*http.Response, error) {
	req, err := NewGetDocumentRequest(c.Server, hash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocumentContents(ctx context.Context, hash string) (*http.Response, error) {
	req, err := NewGetDocumentContentsRequest(c.Server, hash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewListDocumentsRequest generates requests for ListDocuments
func NewListDocumentsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/document")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddDocumentRequest calls the generic AddDocument builder with application/json body
func NewAddDocumentRequest(server string, body AddDocumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDocumentRequestWithBody(server, "application/json", bodyReader)
}

// NewAddDocumentRequestWithBody generates requests for AddDocument with any type of body
func NewAddDocumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/document")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDocumentRequest generates requests for GetDocument
func NewGetDocumentRequest(server string, hash string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "hash", hash)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/document/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDocumentContentsRequest generates requests for GetDocumentContents
func NewGetDocumentContentsRequest(server string, hash string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "hash", hash)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/document/%s/contents", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type listDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Document
}

// Status returns HTTPResponse.Status
func (r listDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r listDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type addDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Document
}

// Status returns HTTPResponse.Status
func (r addDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r addDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r getDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDocumentContentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r getDocumentContentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDocumentContentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListDocumentsWithResponse request returning *ListDocumentsResponse
func (c *ClientWithResponses) ListDocumentsWithResponse(ctx context.Context) (*listDocumentsResponse, error) {
	rsp, err := c.ListDocuments(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListDocumentsResponse(rsp)
}

// AddDocumentWithBodyWithResponse request with arbitrary body returning *AddDocumentResponse
func (c *ClientWithResponses) AddDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*addDocumentResponse, error) {
	rsp, err := c.AddDocumentWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddDocumentResponse(rsp)
}

func (c *ClientWithResponses) AddDocumentWithResponse(ctx context.Context, body AddDocumentJSONRequestBody) (*addDocumentResponse, error) {
	rsp, err := c.AddDocument(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAddDocumentResponse(rsp)
}

// GetDocumentWithResponse request returning *GetDocumentResponse
func (c *ClientWithResponses) GetDocumentWithResponse(ctx context.Context, hash string) (*getDocumentResponse, error) {
	rsp, err := c.GetDocument(ctx, hash)
	if err != nil {
		return nil, err
	}
	return ParseGetDocumentResponse(rsp)
}

// GetDocumentContentsWithResponse request returning *GetDocumentContentsResponse
func (c *ClientWithResponses) GetDocumentContentsWithResponse(ctx context.Context, hash string) (*getDocumentContentsResponse, error) {
	rsp, err := c.GetDocumentContents(ctx, hash)
	if err != nil {
		return nil, err
	}
	return ParseGetDocumentContentsResponse(rsp)
}

// ParseListDocumentsResponse parses an HTTP response from a ListDocumentsWithResponse call
func ParseListDocumentsResponse(rsp *http.Response) (*listDocumentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &listDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Document
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddDocumentResponse parses an HTTP response from a AddDocumentWithResponse call
func ParseAddDocumentResponse(rsp *http.Response) (*addDocumentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &addDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Document
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetDocumentResponse parses an HTTP response from a GetDocumentWithResponse call
func ParseGetDocumentResponse(rsp *http.Response) (*getDocumentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDocumentContentsResponse parses an HTTP response from a GetDocumentContentsWithResponse call
func ParseGetDocumentContentsResponse(rsp *http.Response) (*getDocumentContentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDocumentContentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lists the documents on the log
	// (GET /api/document)
	ListDocuments(ctx echo.Context) error
	// Adds a document to the document log
	// (POST /api/document)
	AddDocument(ctx echo.Context) error
	// Retrieves a document
	// (GET /api/document/{hash})
	GetDocument(ctx echo.Context, hash string) error
	// Gets the document contents
	// (GET /api/document/{hash}/contents)
	GetDocumentContents(ctx echo.Context, hash string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) ListDocuments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDocuments(ctx)
	return err
}

// AddDocument converts echo context to params.
func (w *ServerInterfaceWrapper) AddDocument(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddDocument(ctx)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, hash)
	return err
}

// GetDocumentContents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocumentContents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocumentContents(ctx, hash)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/document", wrapper.ListDocuments)
	router.POST("/api/document", wrapper.AddDocument)
	router.GET("/api/document/:hash", wrapper.GetDocument)
	router.GET("/api/document/:hash/contents", wrapper.GetDocumentContents)

}

