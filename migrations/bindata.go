// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 1_create_table_document.down.sql
// 1_create_table_document.up.sql
// 2_delete_documents_timestamp_zero.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_table_documentDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x09\xf2\x74\x77\x77\x0d\x52\x28\x2d\x48\x49\x2c\x49\x8d\x2f\x2e\x49\x2c\x29\x8e\x4f\xce\xcf\x2b\x49\xcd\x2b\x29\x8e\x2f\xce\xac\x4a\xb5\xe6\x82\x28\x74\x74\xf2\x71\x55\x00\xcb\x43\x45\x3c\xfd\x5c\x5c\x23\x14\x3c\xdd\x14\x5c\x23\x3c\x83\x43\x82\x15\x32\x53\x2a\x40\x3a\x8b\x33\x8b\x4b\x52\xf3\x92\x2b\xe3\x33\x12\x8b\x33\xf0\x28\x2d\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\x40\x56\x08\xb1\x25\x25\x3f\xb9\x34\x37\x35\xaf\xc4\x1a\x10\x00\x00\xff\xff\xf3\xed\x99\xe6\xa3\x00\x00\x00")

func _1_create_table_documentDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_documentDownSql,
		"1_create_table_document.down.sql",
	)
}

func _1_create_table_documentDownSql() (*asset, error) {
	bytes, err := _1_create_table_documentDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_document.down.sql", size: 163, mode: os.FileMode(420), modTime: time.Unix(1598295069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_table_documentUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\x9b\x30\x1c\xc5\xef\xfe\x14\x6f\xa7\x82\xd6\x4c\x99\xb4\xd3\x50\x0f\x90\xb8\xc4\x1a\x33\x95\x71\xda\xf5\x84\x50\xb0\x06\x5a\x62\xa3\xda\x6c\xcd\x3e\xfd\x64\x02\x49\x49\x97\x43\x24\xec\x9f\xdf\xff\xff\xde\x5b\x09\x1a\x4b\x0a\x19\x27\x19\x45\x6d\x76\xfd\x41\x69\x47\x02\x02\x00\x4d\x65\x1b\xbc\xfd\xad\x36\xb1\x08\xbe\x2c\x43\x3c\x08\xf6\x3d\x16\xcf\xf8\x46\x9f\x6f\x07\x74\x67\xb4\x6d\xad\x53\x7a\x77\x2c\x87\x67\x13\x7a\xba\x76\xc7\x4e\xcd\x94\x1e\x63\x31\x10\x9f\x97\xcb\x10\x3c\x97\xe0\xdb\x2c\x1b\xd9\xf6\xa0\xac\xab\x0e\xdd\xc4\x26\x2c\x65\x5c\x8e\x1f\x73\x76\x67\xb4\x53\xda\xd9\xb3\x6e\x92\xe5\x09\x09\x23\x42\x16\x0b\x3c\x29\x58\xf3\xe2\x60\xf4\x45\xf3\xf6\x64\xca\x1a\xb4\x1a\xae\x51\xe6\xe5\x88\x4a\xa3\xd5\xb5\x7a\x85\x6d\x4c\xbf\xaf\x61\x3b\xa5\x6a\xf4\x1d\x5c\xd3\xea\x9f\xd6\x4b\xc9\x7c\x9d\x7f\x85\x54\xd6\xf9\x43\xfb\x81\x8c\xb1\x31\xbe\xa6\x3f\xd0\xd6\xaf\xe5\x79\xc2\xc9\x7e\xce\xcf\x61\x22\xb8\x9a\x1e\x46\xef\x9f\xbf\xcb\x6f\x26\x70\x7d\xeb\x0d\xce\x8a\xb3\xae\x72\x76\x6c\xed\x97\x3a\x9e\xe3\xfd\x6f\x57\xbf\xab\x7d\xaf\x66\x0d\x90\xcb\x4a\x52\xb0\x34\xa5\x02\x7d\x57\x57\x4e\x95\x83\x70\x39\xc5\x5c\xda\xf6\xaf\xc2\xf6\x61\xed\xc9\xfc\xfe\x12\xff\x9b\x6d\x49\x42\x53\xc6\x87\x41\x23\x38\x68\xa0\xa0\x72\x9c\x7c\x87\x55\x5c\xc8\x20\x18\xfe\x4f\x47\x71\x01\xc6\x25\x4d\xa9\x08\xf1\x11\xec\xde\x37\x1c\x64\x94\xa7\x72\x13\x68\xf5\xe7\xd3\x34\x28\xbc\xc5\x32\xc4\xe2\x8a\x30\xfb\x7a\x4e\x84\x5e\x70\x34\x18\xe2\x69\x43\x05\x1d\x62\xb9\xc3\xcd\xc4\x2d\xbc\x95\x9b\x88\x50\xbe\x8e\x08\xe3\x05\x15\xd2\xaf\x90\x8f\xdb\x3e\xc6\xd9\x96\x16\x08\xae\x78\x2f\x1e\xfd\x0b\x00\x00\xff\xff\x39\xbf\x75\x3f\x33\x03\x00\x00")

func _1_create_table_documentUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_documentUpSql,
		"1_create_table_document.up.sql",
	)
}

func _1_create_table_documentUpSql() (*asset, error) {
	bytes, err := _1_create_table_documentUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_document.up.sql", size: 819, mode: os.FileMode(420), modTime: time.Unix(1598295069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_delete_documents_timestamp_zeroUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x41\x0a\x82\x40\x14\x06\xe0\x7d\xa7\xf8\x2f\x60\x60\x3a\x6a\x44\x9b\x68\x32\xc1\x8a\xcc\x68\x3d\xe8\x2b\x06\x9c\xf7\xc2\x19\x23\x3a\x7d\xd0\xba\x03\x7c\x5f\x14\xe1\xca\xf6\x0d\x36\x2c\x9e\x3a\xe1\xde\xe3\x65\x86\x89\x70\x97\x11\x1f\x1a\x05\xa5\x0c\x86\x1f\x08\xd6\xd1\xbc\xb5\x8e\x60\x3c\x2e\xe7\xda\x06\xc2\xa6\x2a\xab\x63\x0b\xeb\x11\x65\xf9\x52\x25\x59\xaa\xf2\xa2\xc8\xe3\x24\x55\xb1\x5a\xcc\xb6\xba\xd6\xad\xc6\xae\x39\x1d\xd0\x4b\x37\x39\xe2\x80\xdb\x5e\x37\xfa\xb7\xf9\x60\xdc\x13\xeb\xbf\x76\xf5\x0d\x00\x00\xff\xff\x2f\x24\xab\x3c\x99\x00\x00\x00")

func _2_delete_documents_timestamp_zeroUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_delete_documents_timestamp_zeroUpSql,
		"2_delete_documents_timestamp_zero.up.sql",
	)
}

func _2_delete_documents_timestamp_zeroUpSql() (*asset, error) {
	bytes, err := _2_delete_documents_timestamp_zeroUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_delete_documents_timestamp_zero.up.sql", size: 153, mode: os.FileMode(420), modTime: time.Unix(1605007083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\xc8\x11\x7e\x16\xff\x8a\x3d\x01\x77\x10\x0b\x57\xe6\xef\x1f\x02\x0c\x14\x97\xa4\x40\x1e\x9a\x03\x9a\xdc\x53\xa7\x30\x96\xe4\xae\x43\x54\x12\x15\x92\xba\x8c\x1d\xf8\x7f\x2f\xbe\x9d\x95\x2d\x27\x17\x3b\x28\xfa\x40\x89\x5c\xee\xce\x7c\xf3\xcd\xcc\x37\xbc\xbc\x54\xaf\x86\xce\xa8\x1b\xb3\x37\xa3\x9e\x4d\xa7\xec\x30\xaa\x83\x6e\xff\xa3\x6f\x8c\xda\xf5\x37\xa3\x9e\xfb\x61\x3f\xa9\xe6\x56\xdd\x0c\x7f\x6d\xfa\x7d\xa7\x67\xad\x5e\xff\xa6\xde\xfd\xf6\x41\xbd\x79\xfd\xf6\xc3\x5a\xad\xfe\xf6\x70\x3a\x0c\x2e\x2f\xd5\x34\x1c\xc7\xd6\x4c\x1b\xdc\xc7\xd7\xed\x68\xf4\x6c\xae\x67\xdd\x6c\xcd\x75\x37\xb4\xc7\x9d\xd9\xcf\xeb\x6e\xf8\xbc\x5f\x4f\x9f\xb6\xcf\xed\x39\x1e\x4e\x3b\x92\xeb\xce\x6c\xcd\xfc\xf8\x6e\xba\x9e\xfb\x9d\x99\x66\xbd\x3b\x5c\xdf\x99\x71\x38\xdb\xeb\x21\xae\x6f\x86\xe0\xdb\x30\x82\xa0\xdf\x1d\x86\x71\x56\xab\x60\xb1\x6c\x6e\x67\x33\x2d\x83\xc5\xb2\x1d\x76\x87\xd1\x4c\xd3\xe5\xcd\x5d\x7f\xc0\x82\xdd\xcd\xf8\xeb\x07\xf9\xbd\xec\x87\xe3\xdc\x6f\xf1\x30\xb8\x03\x07\x3d\x7f\xbc\xb4\xfd\xd6\xe0\x06\x0b\xd3\x3c\xf6\xfb\x1b\xf7\x0e\xc0\x96\x41\x18\x04\xf6\xb8\x6f\x4f\x68\xfe\x69\x74\xb7\x72\xcc\xfd\xeb\xdf\x70\x7b\xa1\xf6\x7a\x67\x94\x1c\x0b\xd5\xea\xb4\x6a\xc6\x71\x18\x43\xf5\x25\x58\xdc\xdc\xb9\x27\xb5\xb9\x52\x40\xb5\x7e\x67\x3e\xc3\x88\x19\x57\x0e\x36\x9e\x7f\x3d\x5a\x6b\x46\x67\x36\x0c\x83\x45\x6f\xdd\x81\x9f\xae\xd4\xbe\xdf\xc2\xc4\x62\x34\xf3\x71\xdc\xe3\xf1\x42\xd9\xdd\xbc\x7e\x03\xeb\x76\xb5\x84\x21\xf5\xf3\xa7\x8d\xfa\xf9\x8f\xa5\x20\x71\xbe\xc2\x60\x71\x1f\x04\x8b\x3f\xf4\xa8\x9a\xa3\x55\xe2\x47\x9c\x04\x8b\x6b\x81\x73\xa5\xfa\x61\xfd\x6a\x38\xdc\xae\x7e\x69\x8e\xf6\x42\xdd\xdc\x85\xc1\xa2\xdd\xbe\x39\x21\x5d\xbf\xda\x0e\x93\x59\x85\xc1\xff\x0b\x0f\xcc\x88\xfd\xef\x18\x32\xe3\x28\xb8\xfd\x62\x73\xb4\xeb\x5f\x01\x7d\x15\x5e\x60\x47\x70\x1f\x04\xf3\xed\xc1\x28\x3d\x4d\x66\x06\xe5\xc7\x76\x86\x15\x17\x9f\xcf\x47\xb0\xe8\xf7\x76\x50\x6a\x98\xd6\x7f\xef\xb7\xe6\xed\xde\x0e\x0f\xe7\x7c\x0a\x4f\xeb\x67\x16\x5c\x0e\x95\xf2\x69\x0c\x16\x53\x7f\xe7\x9e\xfb\xfd\x5c\x64\xc1\x62\x87\xc6\x52\x0f\x46\xff\x31\x74\xc6\x2d\x7e\xe8\x77\x46\xa1\x4c\xd6\xb8\x83\x9f\xcb\x4b\xf5\x0e\xb6\x7c\x08\xa8\x2c\x47\x83\xd4\xd0\xca\xf6\x5f\x83\x08\xdd\xfe\x55\xe8\x5d\x03\xcc\xc3\xd9\xb5\x3b\x29\x56\xdf\x03\xd1\xb9\x55\x40\x7c\xc6\x2a\xf6\xaf\x42\x09\xe0\xa9\x51\x77\x50\x8c\x22\x90\x27\x46\x11\xe8\x33\x46\xb1\x7f\x15\x9e\xd3\xf0\xd4\xb4\x3b\xfe\x7d\xd3\xbd\xbd\x75\x6c\x3d\xef\x01\x54\xae\xc2\x47\x5a\xbf\x71\x71\xc6\xf5\xdb\xe9\x75\x3f\x3e\x71\xf3\xf9\xa3\x99\x3f\x9a\x51\x69\xd5\xf5\xa3\x69\xe7\x61\xbc\x7d\xc6\x9d\x3b\xbf\x0a\x55\x33\x0c\xdb\x6f\x43\xf9\x65\x98\xd6\x88\x03\x3e\x7e\xba\x52\xd1\x29\x15\xb7\xd3\x13\x97\xfd\xa4\xa6\xdb\xe9\x25\xee\xde\xdf\x4e\x92\x0f\x33\x5a\xdd\x9a\x2f\xf7\x67\xfe\x7c\x71\xa3\x5f\xaf\xaf\xbf\x23\xa2\xaf\x87\xcf\xfb\xf7\x9f\xb6\xea\xca\x17\xfa\x6a\x49\x1c\x5b\xe2\xaa\x21\x8e\x2a\xe2\x28\xfa\xf3\xcb\x5a\xe2\x32\x21\x8e\x6a\x62\x8b\x7f\x4b\x9c\x47\xfe\x8c\x5f\x2b\x33\xe2\xb2\x94\x2b\xea\x88\xf3\x84\x38\xa9\x88\x93\x8e\x38\xab\x88\xb3\x9a\x38\x69\xe5\xbf\xea\x88\x13\x4b\x9c\x98\xc7\xf5\x04\xeb\x78\xb6\xc4\xad\x21\x6e\xf1\xbe\x91\xf7\x6d\x27\xf7\xa7\x3d\x89\xdf\xa3\x61\x4f\x13\x37\x39\xb1\x29\x88\x2b\xef\xd3\x61\xc9\x3c\xae\x98\x38\xcf\x25\x8e\x16\xf6\x52\xe2\x2c\x27\x4e\x5b\x62\x0b\x9c\xad\x5c\x49\x4a\x1c\x67\xb2\xde\x75\x72\x7f\x5a\xc7\x5a\x95\xca\x59\xf8\x88\x71\x3e\x21\xce\x53\xe2\x44\x13\x67\x11\x71\xaa\x85\xc7\x34\x95\xff\xac\x11\x0e\x6c\x4a\x5c\x27\x82\xdf\xa4\xf2\x3e\x4e\x1e\xf7\xda\xe8\x91\xa7\x16\xb1\x22\xa6\x4e\x9e\x4f\xfc\x60\xcd\xf1\x18\x11\xe7\x85\xf0\xde\xc4\xc4\x49\x2e\x57\x6a\x89\x9b\x9a\x38\x05\xfe\x92\x38\xcd\x89\x35\x38\xca\x88\x63\x4d\x1c\x7f\x95\x4b\x77\xa5\xc4\xa6\x23\xae\x6b\xe1\x4e\xa7\xe7\x39\x5f\x9e\x46\xd6\x0b\xa5\xe4\xb5\xf5\xcf\x66\xd6\x49\x81\xcf\x66\x5e\xb0\x58\xbc\x54\x9b\x17\xc1\x62\xb1\x7c\xe9\x3b\x61\x79\x11\x2c\x42\x54\xfb\x8f\x40\x04\xba\xbf\x38\xb9\x3f\x47\xe7\xf4\xfe\x61\xa8\xfe\x58\x94\x2f\x4d\xb1\x87\xe1\xe3\xc6\xc7\xe6\xea\xeb\x06\xfe\x02\x2d\xde\xa8\x1f\x08\xcf\x29\xf3\x46\xc5\x45\x7a\xe1\x34\x61\x73\xae\x97\xab\x2c\x89\x42\xb7\x0e\x15\xdb\x88\xca\xfd\xbe\xef\x79\x15\xe7\x75\x95\xd4\x79\x54\xd4\x17\x2a\x0a\xef\x83\x85\x06\x8a\x5f\x5c\xf0\x5f\x5c\xc4\x1b\xe5\x03\x07\xc4\x8d\xfb\xbd\x7f\x48\x95\xbe\xf8\x21\x15\xf9\xfd\xf0\xbf\x6a\x48\xd1\x12\xd7\x31\x71\x16\x13\x17\x96\xb8\x46\x0f\x44\xc4\x71\x4b\xdc\xa2\x87\x51\x97\x46\x7a\x0f\xef\x75\x29\xfd\xd6\x15\xc4\x59\x2b\xb5\xda\x64\xc4\x5d\xea\xf5\x07\x36\x22\xe2\xa6\x7a\xac\x75\xf4\x54\x9d\x4b\xdf\x77\x9a\xd8\xe6\xc4\x55\x26\xfb\x1b\x9c\x29\x88\x73\x4d\x5c\x24\x52\xf3\xd8\x03\x5c\xd0\x98\xd4\x88\x26\x14\x19\x71\x94\x48\xef\xe1\xaa\x4b\xe9\xfd\x24\x23\x36\xc0\x61\x89\x3b\xfb\xd8\x4b\x9d\x21\xce\x1b\xd1\x42\x60\x40\xef\x47\xe8\x3b\x68\x5b\x29\xff\xd0\x9c\xa2\x23\x2e\x0b\xf1\xe1\x38\xc0\x7a\x29\xbe\xdc\x15\x49\xef\x17\x39\x71\xdc\x10\x37\x5e\xa3\x34\xb0\x15\xd2\xf3\xae\xf7\x8d\xd7\x52\xaf\x4d\x58\xb3\x05\x71\x0a\xdd\x2a\x44\x3b\x2d\x34\xb7\x10\xac\xe0\x32\x2a\x45\x13\x8b\x52\x38\x2c\xbc\x5d\x68\x58\xa9\x45\xb7\x61\xb3\x2a\x65\x4f\xec\xd7\x1b\x2d\x98\x5b\x70\x60\x84\xa7\x1a\x5c\x1b\xe2\x02\xfe\x63\xd1\x17\xf8\x01\x4f\xd0\x58\x3c\x03\x17\x9e\x4d\x44\xdc\x35\x62\x1b\x31\x75\xb5\x60\xd5\x91\xe8\xb7\x06\x57\x46\x34\x17\x39\x4c\x0a\xd9\x0b\x0e\xa0\xbf\xd0\x7b\xd4\x57\x99\x0a\x8e\x13\xfe\xdc\xe7\x0e\xf6\x9a\x94\xb8\x30\xa2\xb3\x26\x97\x3c\xe0\x82\x76\x67\x89\x70\x12\x35\x82\x09\x33\x24\xaf\xbc\xfe\x25\xc4\x05\x6a\x33\x93\xfc\x60\x0d\xd8\x90\xff\x56\x4b\x2e\x1b\x5f\x57\x1a\x39\x8e\x45\x2b\xe1\xa3\xaa\x64\xf6\xb8\x1a\xca\x65\x06\x81\xaf\xca\xe7\x19\xf5\xda\x58\xd1\xe1\x22\x26\x4e\x1b\x62\x8d\x77\x5a\xfc\xc5\x7e\xf6\xa0\x96\x8d\xf6\x35\x55\x48\xed\x60\x0e\x94\xe0\x0f\xf5\x62\xc5\x66\x9e\xc9\x7b\x5b\x4b\xde\x6d\x43\x5c\xc5\xc4\x55\x2b\x75\x81\x3c\xa0\x2e\x74\x21\xf3\xa0\x8b\x64\x3f\xfc\x03\x6f\x89\x39\x92\x78\xdb\xe6\x71\xc6\x02\x5b\x92\x48\x0f\xd5\x5a\xf2\x8a\xba\x41\x2f\x02\x13\x62\x40\x4e\x51\x43\xc8\x4d\x19\x11\x97\x1d\xb1\x69\x64\xce\xc3\x4e\xa5\x25\x07\xe0\x08\xdf\x09\x2e\x4f\xad\x9f\x2f\xa5\xcc\xc6\xda\xc8\xfc\x73\xfd\x85\xef\x87\xd2\xf3\xd3\x88\x3d\xc7\x53\x21\x36\xeb\xd3\xac\xd6\x32\x43\xd1\xb7\x98\x6d\xe0\x0f\x7d\x82\xfd\x38\x9f\xfb\x9a\x44\xbf\x63\x3e\x03\x5b\x5a\x8b\x96\x38\x6e\xb5\xaf\x35\x2b\xb1\xbb\xdc\xc6\x82\x0b\x3c\xd8\xd6\xeb\x4d\x22\x7d\x0c\x3d\x72\xb9\xab\xa5\x6e\x50\x63\x6d\x21\x3d\x81\x7e\x75\xdf\x02\x15\x71\x51\xf9\xfa\x8d\x24\xde\xba\x95\x7c\x61\x5f\xee\x7d\xb7\x98\xe9\xd0\xb6\x4a\x7c\xe0\xbb\x06\xbd\x0e\x5d\x8a\x62\xb1\x8b\xd9\x8d\x7e\xd7\xb5\xef\x61\xf4\x52\x2c\x1a\x03\x4d\xc1\x2c\x87\x36\xa2\x1e\xd1\x73\xd0\x43\xf8\x43\x6f\x02\x03\xb4\xcd\x94\x52\x43\xe0\x07\xdf\x11\x8d\xd7\x52\x7c\x9f\xa0\x9f\x50\xe3\xc8\x0f\x74\x16\x35\x83\x1a\x05\x67\x4e\x13\x8d\xe7\x2c\x13\x9c\xff\x0d\x00\x00\xff\xff\x44\xe9\xcb\x28\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1605007759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_table_document.down.sql":         _1_create_table_documentDownSql,
	"1_create_table_document.up.sql":           _1_create_table_documentUpSql,
	"2_delete_documents_timestamp_zero.up.sql": _2_delete_documents_timestamp_zeroUpSql,
	"bindata.go":                               bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_table_document.down.sql":         &bintree{_1_create_table_documentDownSql, map[string]*bintree{}},
	"1_create_table_document.up.sql":           &bintree{_1_create_table_documentUpSql, map[string]*bintree{}},
	"2_delete_documents_timestamp_zero.up.sql": &bintree{_2_delete_documents_timestamp_zeroUpSql, map[string]*bintree{}},
	"bindata.go":                               &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
